use serde_json::Value;
use serenity::{
    client::bridge::gateway::event::ShardStageUpdateEvent,
    model::{
        channel::{Channel, ChannelCategory, GuildChannel, Message, PrivateChannel, Reaction},
        event::{
            ChannelPinsUpdateEvent, MessageUpdateEvent, PresenceUpdateEvent, ResumedEvent,
            TypingStartEvent, VoiceServerUpdateEvent,
        },
        gateway::{Presence, Ready},
        guild::{Emoji, Guild, Member, PartialGuild, Role},
        id::{ChannelId, EmojiId, GuildId, MessageId, RoleId, UserId},
        user::{CurrentUser, User},
        voice::VoiceState,
    },
    prelude::RwLock,
};
use std::{collections::HashMap, sync::Arc};

#[derive(Clone, Debug)]
pub enum BackendMsg {
    CacheReady(Vec<GuildId>),
    ChannelCreate(Arc<RwLock<GuildChannel>>),
    CategoryCreate(Arc<RwLock<ChannelCategory>>),
    CategoryDelete(Arc<RwLock<ChannelCategory>>),
    PrivateChannelCreate(Arc<RwLock<PrivateChannel>>),
    ChannelDelete(Arc<RwLock<GuildChannel>>),
    ChannelPinsUpdate(ChannelPinsUpdateEvent),
    ChannelRecipientAdd(ChannelId, User),
    ChannelRecipientRm(ChannelId, User),
    ChannelUpdate(Option<Channel>, Channel),
    GuildBanAdd(GuildId, User),
    GuildBanRm(GuildId, User),
    GuildCreate(Guild, bool),
    GuildDel(PartialGuild, Option<Arc<RwLock<Guild>>>),
    GuildEmojiUpdate(GuildId, HashMap<EmojiId, Emoji>),
    GuildIntegrationsUpdate(GuildId),
    GuildMemberAdd(GuildId, Member),
    GuildMemberRm(GuildId, User, Option<Member>),
    GuildMemberUpdate(Option<Member>, Member),
    GuildMembersOffline(GuildId, HashMap<UserId, Member>),
    GuildRoleAdd(GuildId, Role),
    GuildRoleRm(GuildId, RoleId, Option<Role>),
    GuildRoleUpdate(GuildId, Option<Role>, Role),
    GuildUnavailable(GuildId),
    GuildUpdate(Option<Arc<RwLock<Guild>>>, PartialGuild),
    MessageAdd(Message),
    MessageRm(ChannelId, MessageId),
    MessageRmBulk(ChannelId, Vec<MessageId>),
    MessageUpdate(Option<Message>, Option<Message>, MessageUpdateEvent),
    ReactionAdd(Reaction),
    ReactionRm(Reaction),
    ReactionRmAll(ChannelId, MessageId),
    PresenceReplace(Vec<Presence>),
    PresenceUpdate(PresenceUpdateEvent),
    Ready(Ready, crate::ui::InitializationState),
    Resume(ResumedEvent),
    ShardStageUpdate(ShardStageUpdateEvent),
    TypingStart(TypingStartEvent),
    UserUpdate(CurrentUser, CurrentUser),
    VoiceServerUpdate(VoiceServerUpdateEvent),
    VoiceStateUpdate(Option<GuildId>, Option<VoiceState>, VoiceState),
    WebhookUpdate(GuildId, ChannelId),
    Unknown(String, Value),
}
